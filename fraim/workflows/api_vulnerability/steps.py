# SPDX-License-Identifier: MIT
# Copyright (c) 2025 Resourcely Inc.

"""
API Vulnerability Assessment Steps

LLM step creation and configuration logic for API vulnerability assessment workflow.
"""

from pathlib import Path
from typing import Optional

from fraim.config import Config
from fraim.core.llms.litellm import LiteLLM
from fraim.core.parsers import PydanticOutputParser
from fraim.core.prompts.template import PromptTemplate
from fraim.core.steps.llm import LLMStep
from fraim.tools.tree_sitter import TreeSitterTools

from .types import VulnerabilityAssessmentAgentInput, VulnerabilityAssessmentResult

# Load OWASP API Security mapping prompts
OWASP_PROMPTS = PromptTemplate.from_yaml(
    str(Path(__file__).parent / "owasp_security_prompts.yaml"))


def create_vulnerability_assessment_step(
    llm: LiteLLM, config: Config, project_path: Optional[str] = None
) -> LLMStep[VulnerabilityAssessmentAgentInput, VulnerabilityAssessmentResult]:
    """Create the vulnerability assessment step with optional TreeSitter tools."""
    vulnerability_parser = PydanticOutputParser(VulnerabilityAssessmentResult)

    # Try to add TreeSitter tools if we have a valid project path
    enhanced_llm = llm
    if project_path:
        try:
            tree_sitter_tools = TreeSitterTools(project_path).tools
            enhanced_llm = llm.with_tools(tree_sitter_tools)
            config.logger.debug(
                f"TreeSitter tools initialized for vulnerability assessment with path: {project_path}")
        except Exception as e:
            config.logger.warning(
                f"Failed to initialize TreeSitter tools for vulnerability assessment, proceeding without tools: {str(e)}"
            )
    else:
        config.logger.warning(
            "No project path available for TreeSitter tools, proceeding without tools")

    return LLMStep(enhanced_llm, OWASP_PROMPTS["system"], OWASP_PROMPTS["user"], vulnerability_parser)
